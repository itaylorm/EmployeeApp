@page "/employees"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.Components.QuickGrid
@using Newtonsoft.Json
@using iMaxwell.EmployeeClient.Models
@using System.Net.Http.Headers
@using System.Net.Http.Json
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo
@inject ILogger<Employees> log

<div class="h1">Employees</div>
<div><button class="btn btn-primary mb-5" @onclick="StartAddEmployee">Add Employee</button></div>

@if(!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if(employees != null && employees.Any() || currentEmployee != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-8">
                <QuickGrid Items="@employees.AsQueryable()">
                    <TemplateColumn Title="First Name" SortBy="@sortByFirstName">
                        <div class="flex-column items-center">@context.FirstName</div>
                    </TemplateColumn>
                    <TemplateColumn Title="Last Name" SortBy="@sortByLastName">
                        <div class="flex-column items-center">@context.LastName</div>
                    </TemplateColumn>
                    <TemplateColumn Title="Title" SortBy="@sortByTitle">
                        <div class="flex-column items-center">@context.Title</div>
                    </TemplateColumn>
                    <TemplateColumn Title="Salary" SortBy="@sortBySalary">
                        <div class="flex-column items-center">@context.SalaryAsCurrency()</div>
                    </TemplateColumn>
                    <TemplateColumn Title="Actions">
                        <div class="flex-column items-center">
                            <button class="btn btn-primary" @onclick="()=>StartEditEmployee(context)">Edit</button>
                            <button class="btn btn-danger" @onclick="()=>DeleteEmployee(context)">Delete</button>
                            <button class="btn btn-warning" @onclick="()=>ExitEmployee(context)">Exit</button>
                        </div>
                    </TemplateColumn>
                </QuickGrid>
            </div>
            <div class="col">
                @if(currentEmployee != null)
                {
                    <div class="container">
                        <div class="h2 text-center">Edit Employee</div>
                        <EditForm Enhance Model="currentEmployee" method="POST" FormName="employeeForm" OnValidSubmit="SaveChanges">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="mb-3 col-6 form-floating">
                                    <InputText class="form-control text-primary" id="firstName" @bind-Value="currentEmployee.FirstName" />
                                    <label for="firstName" class="form-label text-primary ps-3">First Name</label>
                                    <ValidationMessage For="@(() => currentEmployee.FirstName)" />
                                </div>
                                <div class="mb-3 col-6 form-floating">
                                    <InputText class="form-control text-primary" id="lastName" @bind-Value="currentEmployee.LastName" />
                                    <label for="lastName" class="form-label text-primary ps-3">Last Name</label>
                                    <ValidationMessage For="@(() => currentEmployee.LastName)" />
                                </div>
                                <div class="mb-3 col-6 form-floating">
                                    <InputText class="form-control text-primary" id="title" @bind-Value="currentEmployee.Title" />
                                    <label for="title" class="form-label text-primary ps-3">Title</label>
                                    <ValidationMessage For="@(() => currentEmployee.Title)" />
                                </div>
                                <div class="mb-3 col-6 form-floating">
                                    <InputNumber class="form-control text-primary" id="salary" @bind-Value="currentEmployee.Salary" />
                                    <label for="salary" class="form-label text-primary ps-3">Yearly Salary</label>
                                    <ValidationMessage For="@(() => currentEmployee.Salary)" />
                                </div>
                                <div class="mb-3 col-4 form-floating">
                                    <InputDate class="form-control text-primary" id="hiredate" @bind-Value="currentEmployee.HireDate" />
                                    <label for="hiredate" class="form-label text-primary ps-3">Hire Date</label>
                                </div>
                                <div class="mb-3 col-4 form-floating">
                                    <InputDate class="form-control text-primary" id="exitDate" @bind-Value="currentEmployee.ExitDate" />
                                    <label for="exitdate" class="form-label text-primary ps-3">Exit Date</label>
                                </div>
                                <div class="pt-3 col-3">
                                <InputCheckbox disabled="@true" class="form-check-input text-primary" @bind-Value="currentEmployee.IsCurrent" />
                                <label class="form-check-label text-primary ps-3 pt-2">Is Current</label>
                                </div>
                                 <div class="ms-2 mb-3 pb-2 col-6 border border-outline-primary">
                                     <label class="form-label text-primary">Department:</label>
                                     <br />
                                     <InputSelect class="form-select" @bind-Value="currentEmployee.DepartmentId">
                                         @foreach (var department in departments)
                                        {
                                            <option value="@department.Id">@department.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentEmployee.DepartmentId)" />
                                </div>
                            </div>
                            <button class="btn btn-danger" @onclick="CancelChanges">Cancel</button>
                            <button type="submit" class="btn btn-primary">@submitText</button>
                        </EditForm>
                    </div>
                }
            </div>
        </div>
    </div>
}
else if(employees != null && !employees.Any())
{
    <div class="alert alert-warning text" role="alert">
        No Employees Found
    </div>
}
else
{
    <div class="alert alert-success text" role="alert">
        Loading Employees...
    </div>
}

@code {
    private List<Employee>? employees;
    private List<Department>? departments;
    private HttpClient? client;
    private string? errorMessage;
    private Employee? currentEmployee;
    private string? submitText;

    GridSort<Employee> sortByFirstName = GridSort<Employee>
     .ByDescending(p => p.FirstName);

    GridSort<Employee> sortByLastName = GridSort<Employee>
        .ByDescending(p => p.LastName);

    GridSort<Employee> sortByTitle = GridSort<Employee>
    .ByDescending(p => p.Title);

    GridSort<Employee> sortBySalary = GridSort<Employee>
     .ByDescending(p => p.Salary);


    protected override async Task OnInitializedAsync()
    {
        await GetEmployees();
        await GetDepartments();
    }

    private async Task GetEmployees()
    {
        errorMessage = string.Empty;
        employees = null;
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        try
        {
            employees = await client.GetFromJsonAsync<List<Employee>>("employees");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            log.LogError(ex, "Error getting employees");
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetDepartments()
    {
        errorMessage = string.Empty;
        departments = null;
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        try
        {
            departments = await client.GetFromJsonAsync<List<Department>>("departments");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            log.LogError(ex, "Error getting departments");
        }
        await InvokeAsync(StateHasChanged);
    }

    private void StartAddEmployee()
    {
        submitText = "Add Employee";
        currentEmployee = new Employee();
    }

    private void StartEditEmployee(Employee employee)
    {
        submitText = "Save Changes";
        currentEmployee = employee;
    }

    private void ExitEmployee(Employee employee)
    {
        currentEmployee = employee;
    }

    private async Task DeleteEmployee(Employee employee)
    {
        errorMessage = string.Empty;
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        try
        {
            if (employee != null)
            {
                var response = await client.DeleteAsync($"employees/{employee.Id}");

                if (response.IsSuccessStatusCode)
                {
                    var deletedEmployee = employees.FirstOrDefault(e => e.Id == employee.Id);
                    employees.Remove(employee);
                    log.LogInformation("Deleted employee with id {id}", employee.Id);
                    
                    await InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    errorMessage = "Unable to update employee";
                    log.LogError("Unable to delete employee with Id {Id} with reason {Reason}", employee.Id, response.ReasonPhrase);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            log.LogError(ex, "Error deleting employee with Id {id}", employee.Id);
        }
    }

    private async Task SaveChanges()
    {
        if(currentEmployee != null && currentEmployee.Id == 0)
        {
            await AddEmployee();
        }
        else
        {
            await UpdateEmployee();
        }
    }

    private async Task AddEmployee()
    {
        errorMessage = string.Empty;
        employees = null;
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        try
        {
            if (currentEmployee != null)
            {
                var matchingEmployee = employees?.FirstOrDefault(e => e.FirstName == currentEmployee.FirstName && e.LastName == currentEmployee.LastName);
                if(matchingEmployee != null)
                {
                    errorMessage = "Employee already exists";
                    log.LogError("Unable to add {Employee} because it already exists", currentEmployee);
                    return;
                }

                var response = await client.PostAsJsonAsync<dynamic>("employees",
                new
                {
                    currentEmployee?.FirstName,
                    currentEmployee?.LastName,
                    currentEmployee?.Title,
                    currentEmployee?.Salary,
                    currentEmployee?.HireDate,
                    currentEmployee?.DepartmentId,
                    currentEmployee?.ManagerId
                });

                if(response.IsSuccessStatusCode)
                {
                    var newEmployee = await response.Content.ReadFromJsonAsync<dynamic>();
                    var employee = JsonConvert.DeserializeObject<Employee>(newEmployee.ToString());
                    currentEmployee.Id = employee.Id;

                    if(employees == null)
                    {
                        employees = new List<Employee>();
                    };
                    employees.Add(currentEmployee);

                    log.LogInformation("Added {Employee}", currentEmployee);
                    currentEmployee = null;
                    await InvokeAsync(() => StateHasChanged());
                }
                else {
                    errorMessage = "Unable to add employee";
                    log.LogError("Unable to add {Employee} with reason {Reason}", currentEmployee, response.ReasonPhrase);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            log.LogError(ex, "Error adding {Employee}", currentEmployee);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateEmployee()
    {
        errorMessage = string.Empty;
        employees = null;
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        try
        {
            if (currentEmployee != null)
            {
                var response = await client.PutAsJsonAsync<dynamic>($"employees/{currentEmployee.Id}",
                new
                {
                    currentEmployee?.Id,
                    currentEmployee?.FirstName,
                    currentEmployee?.LastName,
                    currentEmployee?.Title,
                    currentEmployee?.Salary,
                    currentEmployee?.HireDate,
                    currentEmployee?.DepartmentId,
                    currentEmployee?.ManagerId
                });

                if (response.IsSuccessStatusCode)
                {
                    log.LogInformation("Updated {Employee}", currentEmployee);

                    await InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    errorMessage = "Unable to update employee";
                    log.LogError("Unable to update {Employee} with reason {Reason}", currentEmployee, response.ReasonPhrase);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            log.LogError(ex, "Error adding {Employee}", currentEmployee);
        }
    }

    private void CancelChanges()
    {
        currentEmployee = null;
    }
}
